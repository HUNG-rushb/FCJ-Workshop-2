[
{
	"uri": "//localhost:1313/vi/",
	"title": "AWS Blue/Green Deployment",
	"tags": [],
	"description": "",
	"content": "Triển khai Blue/Green pipeline trên nền tảng AWS Tổng quan Trong workshop này, chúng ta sẽ cùng nhau xây dựng một Blue/Green pipeline sử dụng AWS CodePipeline và AWS ECS.\nThời lượng: 150 phút. Cần chuẩn bị: tài khoản GitHub, IDE, tài khoản AWS, IAM User/Role với AdministratorAcess. Nội dung Giới thiệu Các bước chuẩn bị AWS CodeCommit AWS CodeBuild AWS CodePipeline AWS CodeDeploy và AWS ECS Dọn dẹp tài nguyên Tài liệu tham khảo "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "\nBlue/Green Deployment là một quy trình triển khai liên tục nhằm giảm thời gian chết và rủi ro bằng cách có hai môi trường production giống hệt nhau, được gọi là Blue và Green.\nGiả sử môi trường Blue đang hoạt động và môi trường Green không hoạt động. Khi nhà phát triển muốn phát hành bất kỳ code mới nào - bản phát hành tính năng mới, phiên bản mới của ứng dụng, v.v. - công việc trên phiên bản mới được thực hiện trong môi trường Green, trong khi phiên bản cũ được duy trì trong Blue. Khi quá trình phát hành mới kết thúc, bộ cân bằng tải sẽ chuyển tất cả lưu lượng sản xuất sang phiên bản Green và phiên bản Blue được duy trì như một bản sao lưu.\nƯu điểm của chiến lược Blue/Green Deployment là :\nTesting parity: tính năng này có nghĩa là các thử nghiệm phản ánh thực sự thực tế của sản xuất. Triển khai bất kỳ lúc nào: không có downtime có nghĩa là chúng ta có thể phát hành bất kỳ lúc nào. Không cần phải đợi các maintenance windows. Chuyển tiếp tức thì: người dùng được chuyển sang phiên bản mới ngay lập tức, hoặc gần như vậy. Mọi người đều xem bản phát hành mới nhất cùng một lúc. Khôi phục tức thì: phần chuyển tiếp hoạt động theo cả hai cách. Nếu chúng ta quyết định quay lại phiên bản trước, chúng ta có thể chuyển tất cả người dùng trở lại ngay lập tức. Hot standby: Blue-Green có thể cứu chúng ta khỏi các tình huống thảm họa. Giả sử rằng một trung tâm dữ liệu chuyển sang chế độ ngoại tuyến, chúng ta sẽ chuyển sang cái khác cho đến khi sự cố được khắc phục. Điều này sẽ hoạt động miễn là chúng ta đã có biện pháp phòng ngừa là không đặt Blue-Green vào cùng một vùng khả dụng. Postmortem: việc gỡ lỗi các bản phát hành không thành công rất khó khăn với việc triển khai tại chỗ. Khi đối mặt với downtime, ưu tiên luôn là trở lại trạng thái bình thường. Việc thu thập dữ liệu gỡ lỗi chỉ là thứ yếu, vì vậy nhiều thông tin có giá trị có thể bị mất trong quá trình khôi phục. Blue-green không gặp phải vấn đề này — Các lần khôi phục luôn giữ nguyên việc triển khai thất bại để phân tích. Song song với đó thì chiến lược này cũng có một vài nhược điểm, có thể kể đến:\nTiêu tốn nhiều tài nguyên do cần duy trì 2 môi trường cùng lúc khi triển khai Blue/Green Deployment đòi hỏi các service trên cả 2 môi trường sử dụng chung database, trong trường hợp code mới có tác động thay đổi cấu trúc database, cần xây dựng chiến lược đồng bộ sao cho cả hai môi trường có thể chạy cùng lúc mà không gặp sự cố. Với vấn đề này, ta có thể sử dụng liquibase để xây dựng giải pháp. "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.1-cluster/",
	"title": "Tạo ECS Cluster",
	"tags": [],
	"description": "",
	"content": "Tạo ECS Cluster 1\n1\n1\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-git_credentials/",
	"title": "Tạo HTTPS Git Credentials cho CodeCommit",
	"tags": [],
	"description": "",
	"content": "Với Git credential, bạn có thể tạo username và static password trong IAM Console mà bạn có thể sử dụng để truy cập AWS CodeCommit từ cmd, Git CLI hoặc bất kỳ công cụ Git nào hỗ trợ xác thực HTTPS.\nVì đây là static credentials nên chúng có thể được cached bằng cách sử dụng các công cụ quản lý mật khẩu có trong hệ điều hành local của bạn hoặc được lưu trữ trong tiện ích quản lý thông tin xác thực. Điều này cho phép bạn bắt đầu với AWS CodeCommit trong vòng vài phút. Bạn không cần tải xuống AWS CLI hoặc đặt cấu hình ứng dụng khách Git để kết nối với kho lưu trữ CodeCommit trên HTTPS. Bạn cũng có thể sử dụng username và password để kết nối với CodeCommit từ các công cụ của bên thứ ba hỗ trợ xác thực tên username và password, bao gồm các ứng dụng khách GUI Git phổ biến (như TowerUI) và IDE (như Eclipse, IntelliJ và Visual Studio).\nTạo HTTPS Git Credentials cho CodeCommit Từ root account, truy cập vào IAM console của IAM account mà bạn sẽ sử dụng cho bài lab này, chọn mục Security credentials. Ở phần HTTPS Git credentials for AWS CodeCommit, chọn Generate credentials Chọn Download credentials, và lưu nó ở nơi bạn có thể dễ dàng truy cập lại. "
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.1-ecr_repo/",
	"title": "Tạo private repo ECR",
	"tags": [],
	"description": "",
	"content": "Tạo private repo ECR 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/3-codecommit/3.1-repo/",
	"title": "Tạo repo CodeCommit",
	"tags": [],
	"description": "",
	"content": "Tạo repo CodeCommit Chuyển hướng tới CodeCommit console. Tại Repositories, chọn Create repository. Mục Repositorie name, nhập FCJ_Repo. Xác nhận repo đã được tạo thành công. Nhấn Clone URL, chọn Clone HTTPS và sang bước tiếp theo. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo HTTPS Git Credentials cho CodeCommit Tạo Public subnet Tạo Security group Tạo Target group Tạo Application load balancer "
},
{
	"uri": "//localhost:1313/vi/3-codecommit/3.2-code/",
	"title": "Push code lên repo",
	"tags": [],
	"description": "",
	"content": "https://github.com/HUNG-rushb/React-Calculator/releases/tag/v1\nPush code lên repo Truy cập vào https://github.com/HUNG-rushb/React-Calculator/releases/tag/v1 và tải về source code. Đây là Calculator App đơn giản được viết bằng React và chúng ta sẽ dùng để deploy. Tải về và giải nén nó trong thư mục mà bạn muốn làm việc. Kiểm tra các file có đầy đủ đủ giống như hình bên dưới hay không. 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.2-build_project/",
	"title": "Tạo CodeBuild project",
	"tags": [],
	"description": "",
	"content": "Tạo CodeBuild project 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-public_subnet/",
	"title": "Tạo Public subnet",
	"tags": [],
	"description": "",
	"content": " Chuyển tới VPC console, và quan sát xem bạn đã có Default VPC hay chưa. Chọn Subnets tại bảng điều hướng bên trái, chọn Create subnet. Chọn Default VPC. Tạo subnet 1: Mục Subnet name, nhập fcj-subnet-1. Mục Availability zone, chọn us-east-1a. Mục IPv4 subnet CIDR block, nhập 172.31.200.0/24. Chọn Add new subnet, và tạo subnet 2: Mục Subnet name, nhập fcj-subnet-1. Mục Availability zone, chọn us-east-1b. Mục IPv4 subnet CIDR block, nhập 172.31.201.0/24. Chọn Add new subnet, và tạo subnet 3: Mục Subnet name, nhập fcj-subnet-1. Mục Availability zone, chọn us-east-1c. Mục IPv4 subnet CIDR block, nhập 172.31.202.0/24. Chọn Create subnet. Xác nhận 3 subnet đã được tạo thành công. "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.2-task_def/",
	"title": "Tạo Task definition",
	"tags": [],
	"description": "",
	"content": "Tạo Task definition 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/3-codecommit/",
	"title": "AWS CodeCommit",
	"tags": [],
	"description": "",
	"content": "\nNội dung Tạo repo CodeCommit Push code lên repo "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.3-code/",
	"title": "Cập nhật code",
	"tags": [],
	"description": "",
	"content": "Cập nhật code 1 1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/4-codebuild/4.3-role/",
	"title": "Cập nhật quyền cho codebuild role",
	"tags": [],
	"description": "",
	"content": "Cập nhật quyền cho codebuild role 1 1 1 1 1 1 1 1 { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ecr-public:GetAuthorizationToken\u0026#34;, \u0026#34;sts:GetServiceBearerToken\u0026#34;, \u0026#34;ecr-public:BatchCheckLayerAvailability\u0026#34;, \u0026#34;ecr-public:GetRepositoryPolicy\u0026#34;, \u0026#34;ecr-public:DescribeRepositories\u0026#34;, \u0026#34;ecr-public:DescribeRegistries\u0026#34;, \u0026#34;ecr-public:DescribeImages\u0026#34;, \u0026#34;ecr-public:DescribeImageTags\u0026#34;, \u0026#34;ecr-public:GetRepositoryCatalogData\u0026#34;, \u0026#34;ecr-public:GetRegistryCatalogData\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-security_group/",
	"title": "Tạo Security group",
	"tags": [],
	"description": "",
	"content": " Tạo Security group Chuyển tới Security Groups, chọn Create security group. Tạo security group: Mục Security group name, nhập FCJ_SG.\nMục Description, nhập Allow inbound HTTP on port 80.\nMục VPC, chọn Default VPC.\nMục Inbound rules, chọn Add rule, Type chọn HTTP, Source chọn Anywhere-IPv4.\nKéo xuống dưới cùng, chọn Create security group (không có trong hình).\n"
},
{
	"uri": "//localhost:1313/vi/4-codebuild/",
	"title": "AWS CodeBuild",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo private repo ECR Tạo CodeBuild project Cập nhật quyền cho codebuild role "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.4-service/",
	"title": "Tạo Cluster service",
	"tags": [],
	"description": "",
	"content": "Tạo Cluster service 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-target_group/",
	"title": "Tạo Target group",
	"tags": [],
	"description": "",
	"content": "Tạo Target group Chuyển tới EC2 console. Chuyển tới Target groups, chọn Create target group. Tạo target group: Mục Target type, chọn IP Adressess. Mục Target group name, nhập FCJ-TG. Kéo xuống chọn Create target group. Xác nhận target group đã được tạo thành công. "
},
{
	"uri": "//localhost:1313/vi/5-codepipeline/",
	"title": "AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "AWS CodePipeline là dịch vụ continuous delivery mà bạn có thể sử dụng để lập mô hình, trực quan hóa và tự động hóa các bước cần thiết để deploy phần mềm của mình. Bạn có thể nhanh chóng thiết lập mô hình, xác định cấu hình các giai đoạn khác nhau của quy trình phát hành phần mềm. CodePipeline tự động hóa các bước cần thiết để liên tục deploy các thay đổi phần mềm.\n1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.5-deploy_stage/",
	"title": "Cập nhật Deploy stage",
	"tags": [],
	"description": "",
	"content": "Cập nhật Deploy stage 1 1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.5-alb/",
	"title": "Tạo Application load balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Application load balancer Chuyển hướng tới Load balancers, chọn Create load balancer. Chọn Application Load Balancer _ Mục Load balancer name, nhập FCJ-ALB. Mục Scheme, chọn Internet-facing (mặc định). Mục IP address type, chọn IPv4 (mặc định). Tại mục Network mapping: Mục VPC, chọn Default VPC. Mục Mappings, tick chọn cả 3 AZ, sau đó chọn các fcj-subnet tương ứng với từng AZ mà ta đã tạo. Tại mục Security groups, mở bảng dropdown, bỏ chọn default và chọn FCJ-SG. Tại mục Listeners and routing, tại Default action, chọn target group FCJ-TG. Kiểm tra lại cấu hình. Xác nhận ALB đã được tạo thành công. "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/",
	"title": "AWS CodeDeploy và AWS ECS",
	"tags": [],
	"description": "",
	"content": "Nội dung Tạo ECS Cluster Tạo Task definition Cập nhật code Tạo Cluster service Cập nhật Deploy stage Cập nhật và quan sát deployment "
},
{
	"uri": "//localhost:1313/vi/6-codedeploy/6.6-deployment/",
	"title": "Cập nhật và quan sát deployment",
	"tags": [],
	"description": "",
	"content": "Cập nhật và quan sát deployment 1 1 1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/7-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
},
{
	"uri": "//localhost:1313/vi/8-ref/",
	"title": "Tài liệu tham khảo",
	"tags": [],
	"description": "",
	"content": " https://stackoverflow.com/questions/69274998/could-not-connect-to-the-endpoint-url-https-api-ecr-public-xxxxxxxxx-amazona\nhttps://stackoverflow.com/questions/38587325/aws-ecr-getauthorizationtoken\nhttps://stackoverflow.com/questions/62022787/aws-ecs-blue-green-codepipeline-exception-while-trying-to-read-the-image-artifa\nhttps://stackoverflow.com/questions/60684118/aws-codedeploy-requires-two-target-groups-but-why\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]